View(medical)
intersect(x,medical)
overlap::overlapTrue(x,medical)
View(x)
y <- merge(x,medical,by=c("ssn","V2"))
y <- merge(x,medical,by.x=c("ssn","V2"))
y <- merge(x,medical,by.x=c("ssn","ssn"),by.y = c("ssn","V2"))
y <- read.csv("medical.csv",header=FALSE)
View(medical)
View(medical)
View(medical)
View(medical)
View(x)
View(y)
View(y)
View(x)
View(x)
View(y)
View(y)
View(x)
View(x)
y <- merge(x,medical,by=c("V2","V2"))
y <- merge(x,y,by=c("V2","V2"))
View(y)
View(y)
View(y)
View(y)
View(y)
library(xlsx)
install.packages("xlsx")
library(xlsx)
View(y)
View(y)
View(y)
View(y)
library(xlsx)
library("xlsx")
View(y)
library(xlsx)
install.packages("xlsx")
library(xlsx)
write.csv(y,file = "edu_medical.csv",na="NA")
View(x)
z <- read.csv("medical.csv",header=FALSE)
y <- merge(x,z,by=c("ssn","first_name","middle_name","last_name","postcode","phone","gender"))
y <- merge(x,z,by=c("ssn","first_name","middle_name","last_name","postcode","phone","gender"))
View(z)
View(z)
y <- merge(x,z,by=c("V2","V3","V4","V5","V6")
)
View(y)
View(y)
View(x)
x <- read.csv("edu_emp.csv",header=FALSE)
View(x)
View(x)
y <- merge(x,z,by=c("V2","V3","V4","V5","V6","V8","V9")
)
View(y)
View(y)
View(x)
View(x)
y <- merge(x,z,by=c("V2","V3","V4","V5","V6","V8","V9"))
View(y)
View(y)
y <- merge(x,z,by=c("V2","V3","V4","V5","V6")
)
write.csv(y,file = "edu_medical1.csv",na="NA")
View(y)
View(y)
a <- merge(x,y,by=c("V8.x","V8.y"))
View(y)
View(y)
cbind(y,V8.x,V8.y)
cbind(y,"V8.x","V8.y")
a <- cbind(y,"V8.x","V8.y")
View(a)
View(a)
View(a)
rm a
rm(a)
a <- merge(y,y,by=c("V8.x","V8.y"))
View(a)
View(a)
View(a)
View(a)
b <- merge(x,z,by=c("V2","V3","V4","V5","V6","V8","V9"))
install.packages("taRifx","plyr","Deducer")
library(plyr)
a <- arrange(y,desc("V7.y"))
View(x)
View(y)
View(x)
duplicated(x,incomparables = FALSE)
vocabulary[duplicated(V2)]
library(data.table)
dt = data.table(vocabulary)
dt = data.table(x)
dt[duplicated(V2),cbind(.SD[1],number = .N),by= V2]
duplicated(x)
x[duplicated(x)]
duplicated(medical)
medical[duplicated(medical)]
View(dt)
rm(dt)
unique(x)
x[duplicated(x),]
unique(x) == x[!duplicated(x),]
View(y)
View(y)
View(y)
rm(y)
library(readr)
edu_medical1 <- read_csv("~/Desktop/COMP 8430 Data Wrangling/Ass 2/edu_medical1.csv")
View(edu_medical1)
y <- read.csv("edu_medical1.csv",header=FALSE)
unique(y)
y[duplicated(y),]
unique(y) == y[!duplicated(y),]
unique(medical)
View(medical)
View(medical)
z <- read.csv("medical.csv",header=FALSE)
View(z)
unique(z)
z[duplicated(z),]
unique(z) == z[!duplicated(z),]
View(y)
with(y,cor(V28,V29))
y.cor['V28','V29']
library("ggpubr")
install.packages("ggpubr")
library("ggpubr")
ggscatter
ggscatter(y,x="V28",y="V29",add = "reg.line", conf.int = TRUE, cor.coef = TRUE, cor.method = "pearson",xlab="bmi",ylab="blood_pressure")
View(edu_medical1)
a <- read.csv("edu_medical2.csv",header=FALSE)
View(a)
View(a)
read.csv("edu_medical2.csv",header=FALSE)
library(readr)
edu_medical2 <- read_csv("~/edu_medical2.csv")
View(edu_medical2)
rm(a)
rm(edu_medical1)
ggscatter(edu_medical2,x="bmi",y="blood_pressure",add = "reg.line", conf.int = TRUE, cor.coef = TRUE, cor.method = "pearson",xlab="bmi",ylab="blood_pressure")
ggscatter(edu_medical2,x="weight",y="blood_pressure",add = "reg.line", conf.int = TRUE, cor.coef = TRUE, cor.method = "pearson",xlab="weight",ylab="blood_pressure")
ken <- cor.test(edu_medical2$bmi,edu_medical2$blood_pressure)
ken <- cor.test(edu_medical2$cholesterol_level,edu_medical2$blood_pressure)
ken <- cor.test(edu_medical2$cholesterol_level,edu_medical2$blood_pressure, method = "kendall")
ggscatter(edu_medical2,x=",bmi",y=",blood_pressure",add = "reg.line", conf.int = TRUE, cor.coef = TRUE, cor.method = "pearson",xlab="bmi",ylab="blood_pressure")
cor.test(y[["V28"]],z[["V29"]])
colA <- y[,V28]
colA <- edu_medical2[,bmi]
install.packages("rattle")
library("rattle")
attach(y)
View(y)
View(y)
y.cor = cor(V18,V28,method="pearson")
y.cor = cor(",V18",",V28",method="pearson")
V18 <- gsub(",","",V18)
V18 <- as.numeric(V18)
V28 <- gsub(",","",V28)
V28 <- as.numeric(V28)
y.cor = cor(V18,V28,method="pearson")
y.cor
cor.mat = cor (y, method = "pearson")
plot(V18,V28,xlab="salary",ylab="bmi",pch=21)
cor.test(y$V18,y$V28)
plot(V18,V29,xlab="salary",ylab="cholesterol level",pch=21)
plot(V31,V29,xlab="smoking status",ylab="cholesterol level",pch=21)
plot(V18,V30,xlab="salary",ylab="cholesterol level",pch=21)
plot(V18,V31,xlab="salary",ylab="blood pressure",pch=21)
plot(V18,V29,xlab="salary",ylab="blood pressure",pch=21)
View(edu_medical2)
plot(V20,V29,xlab="year of experience",ylab="blood pressure",pch=21)
plot(V31,V33,xlab="smoking status",ylab="deceased status",pch=21)
a <- merge(x,z,by=c("V2","V3","V4","V5","V6","V8","V9"))
View(a)
View(a)
View(a)
a <- merge(x,z,by=c("V8","V9"))
View(x)
View(z)
View(z)
View(edu_medical2)
a <- read.csv("edu_medical2.csv",header=FALSE)
View(a)
View(y)
dplyr::intersect(V8,V23)
dplyr::intersect(a$V8,a$V23)
b <- dplyr::intersect(a$V8,a$V23)
b <- dplyr::union(a$V8,a$V23)
df$New<-rowSums(df[, c(a$V8, a$V23)], na.rm=T)
install.packages("tidyr")
library(tidyr)
df[is.na(a)]
df[is.na(a)] = ''
a[is.na(a)] = ''
unite(a,new,V8:V22, sep='')
b <- unite(a,new,V8:V22, sep='')
View(b)
View(b)
rm(b)
a[,New := na.omit(c(V8,V22)), by = V1][,c("V8","V22"):=NULL]
df1 <- data.frame(x=factor(c("a$V8")))
View(df1)
View(df1)
df1 <- data.frame(c("a$V8"))
View(df1)
View(df1)
df1 <- data.frame(x=factor(c(a$V8)))
View(df1)
View(df1)
df1 <- data.frame(x=factor(c(a$V8)),na="NA")
View(df1)
View(df1)
df1 <- data.frame(x=factor(c(a$V8),na="NA"))
df1 <- data.frame(x=factor(c(a$V8)))
View(df1)
View(df1)
df2 <- data.frame(x=factor(c(a$V22)))
View(df2)
View(df2)
df2 <- data.frame(x=factor(c(a$V23)))
View(df2)
View(df2)
rbind(df1,df2)
b <- rbind(df1,df2)
View(b)
View(b)
union(df1,df2)
b <- union(df1,df2)
c <- unite(a,new,V8:V23, sep='')
View(c)
View(c)
c <- unite(a,new,V8,V23, sep='')
merge(df1,df2)
c <- unite(a,new,V8,V23, all= TRUE)
View(c)
x <- read.csv("emp_edu.csv",header=FALSE)
x <- read.csv("edu_emp.csv",header=FALSE)
View(x)
View(x)
View(z)
View(z)
View(x)
View(x)
dplyr::left_join(x,z,by=("V2","V3","V4","V5","V6","V8","V9")
m <- dplyr::left_join(x,z,by=("V2","V3","V4","V5","V6","V8","V9"))
m <- dplyr::left_join(x,z,by="V2","V3","V4","V5","V6","V8","V9")
m <- dplyr::left_join(x,z,by=c("V2","V3","V4","V5","V6","V8","V9"))
View(m)
View(m)
m <- dplyr::anti_join(x,z,by=c("V2","V3","V4","V5","V6","V8","V9"))
View(m)
View(m)
y <- merge(x,z,by=c("V2"))
View(y)
View(y)
write.csv(y,file = "edu_medical.csv",na="NA")
View(a)
View(a)
delete(a)
rm(a)
rm(c)
rm(df1)
rm(df2)
rm(edu_medical2)
rm(m)
rm(medical)
rm(x)
rm(y)
rm(z)
rm(b)
rm(df)
a <- read.csv("Enterprise_Adelaide.csv",header=TRUE)
duplicated(a,incomparables = FALSE)
du
duplicated(a)
a[duplicated(a)]
x[duplicated(a)]
rm(a)
x <- read.csv("Enterprise_Adelaide.csv",header=TRUE)
duplicated(x)
x[duplicated(a)]
x[duplicated(x)]
unique(x)
read.csv("sa.psv", sep = "|", header = FALSE, stringsAsFactors = FALSE)
read.csv("sa.psv", sep = "|", header = FALSE, stringsAsFactors = FALSE)
x <- read.csv("Enterprise_Adelaide_final.csv",header=TRUE)
View(x)
View(x)
binning(x$Meeting.Duration, bins=4, method=c("quantile", "wtd.quantile", "kmeans"),labels=NULL, ordered=TRUE, weights=NULL)
.bincode(x$Meeting.Duration, breaks, right = TRUE, include.lowest = FALSE)
.bincode(x$Meeting.Duration, right = TRUE, include.lowest = FALSE)
x <- read.csv("Enterprise_Adelaide_final.csv",header=TRUE)
b <- c(-Inf, 35, 70, 105, 300, Inf)
names <- c("Too short","Short", "Standard", "Long, "Over long")
names <- c("Too_short","Short", "Standard", "Long, "Over_long")
names <- c("TooShort","Short", "Standard", "Long, "OverLong")
names <- c("Too short","Short", "Standard", "Long", "Over long")
x$Meeting.Duration <- cut(x$Meeting.Duration, breaks = b, labels = names)
x
write.csv(x,file = "enterprise.csv",na="NA")
b <- c(0.2, 35, 70, 105, 300)
names <- c("Brief Intro","Short", "Standard", "Long")
x$Meeting.Duration <- cut(x$Meeting.Duration, breaks = b, labels = names)
x$Meeting.Duration <- cut(x$Meeting.Duration, breaks = b, labels = names)
x <- read.csv("Enterprise_Adelaide_final.csv",header=TRUE)
rm(x)
x <- read.csv("Enterprise_Adelaide_final.csv",header=TRUE)
b <- c(0.2, 35, 70, 105)
names <- c("Brief Intro","Short", "Standard", "Long")
x$Meeting.Duration <- cut(x$Meeting.Duration, breaks = b, labels = names)
b <- c(0.2, 35, 70, 105,300)
x$Meeting.Duration <- cut(x$Meeting.Duration, breaks = b, labels = names)
write.csv(x,file = "enterprise.csv",na="NA")
import numpy as np
install.packages('caTools')
library("caTools", lib.loc="~/Library/R/3.3/library")
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
split
# Data Preprocessing
# Importing the dataset
dataset = read.csv('Data.csv')
# Taking care of missing data
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
# Encoding categorical data
dataset$Country = factor(dataset$Country,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3))
dataset$Purchased = factor(dataset$Purchased,
levels = c('No', 'Yes'),
labels = c(0, 1))
# Splitting the dataset into Training set and Test set
# install.packages('caTools')
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
split
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
View(test_set)
View(test_set)
View(training_set)
training_set = scale(training_set)
test_set = scale(test_set)
training_set[,2:3] = scale(training_set[,2:3])
test_set[,2:3] = scale(test_set[,2:3])
View(test_set)
View(test_set)
View(training_set)
setwd("~/Documents/Machine-Learning/Part 4")
dataset = read.csv('Position_Salaries.csv')
View(dataset)
View(dataset)
dataset = dataset[2:3]
lin_reg = lm(formula = Salary ~.,
data = dataset)
summary(lin_reg)
dataset$Level2 = dataset$Level^2
dataset$Level3 = dataset$Level^3
poly_reg = lm(formula = Salary ~.,
data = dataset)
summary(poly_reg)
libray(ggplot2)
install.packages('ggplot2')
libray(ggplot2)
library("ggplot2", lib.loc="~/Library/R/3.3/library")
ggplot() +
geom_point(aes(x = dataset$Level , y = dataset$Salary),
color = 'red') +
geom_line(aes(x = dataset$Level , y = predict(lin_reg, newdata = dataset)),
color = 'blue') +
ggtitle('Truth or Bluff (Linear Regression)') +
xlab('Level') +
ylab('Salary')
ggplot() +
geom_point(aes(x = dataset$Level , y = dataset$Salary),
color = 'red') +
geom_line(aes(x = dataset$Level , y = predict(poly_reg, newdata = dataset)),
color = 'blue') +
ggtitle('Truth or Bluff (Polynomial Regression)') +
xlab('Level') +
ylab('Salary')
dataset$Level2 = dataset$Level^2
dataset$Level3 = dataset$Level^3
dataset$Level4 = dataset$Level^4
poly_reg = lm(formula = Salary ~.,
data = dataset)
ggplot() +
geom_point(aes(x = dataset$Level , y = dataset$Salary),
color = 'red') +
geom_line(aes(x = dataset$Level , y = predict(poly_reg, newdata = dataset)),
color = 'blue') +
ggtitle('Truth or Bluff (Polynomial Regression)') +
xlab('Level') +
ylab('Salary')
dataset$Level2 = dataset$Level^2
dataset$Level3 = dataset$Level^3
dataset$Level4 = dataset$Level^4
dataset$Level5 = dataset$Level^5
poly_reg = lm(formula = Salary ~.,
data = dataset)
ggplot() +
geom_point(aes(x = dataset$Level , y = dataset$Salary),
color = 'red') +
geom_line(aes(x = dataset$Level , y = predict(poly_reg, newdata = dataset)),
color = 'blue') +
ggtitle('Truth or Bluff (Polynomial Regression)') +
xlab('Level') +
ylab('Salary')
y_pred = predict(lin_reg, data.frame(Level = 6.5))
y_pred
y_pred = predict(poly_reg, data.frame(Level = 6.5,
Level2 = 6.5^2,
Level3 = 6.5^3,
Level4 = 6.5^4,
Level5 = 6.5^5))
y_pred
setwd("~/Documents/Machine-Learning/Part 5")
install.packages('e1071')
library("e1071", lib.loc="~/Library/R/3.3/library")
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
View(dataset)
View(dataset)
libray(e1071)
regressor = svm(formula = Salary ~ .,
data = dataset,
type = 'eps-regression')
summary(regressor)
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(regressor, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (Regression Model)') +
xlab('Level') +
ylab('Salary')
setwd("~/Documents/Machine-Learning/Part 6")
install.packages('rpart')
library("rpart", lib.loc="~/Library/R/3.3/library")
# Importing the dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
library(rpart)
regressor = rpart(formula = Salary ~ .,
data = dataset)
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(regressor, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (Decision Tree Regression)') +
xlab('Level') +
ylab('Salary')
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff (Decision Tree Regression)') +
xlab('Level') +
ylab('Salary')
y_pred = predict(regressor, data.frame(Level = 6.5))
library(rpart)
regressor = rpart(formula = Salary ~ .,
data = dataset,
control = rpart.control(minsplit = 1))
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(regressor, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (Decision Tree Regression)') +
xlab('Level') +
ylab('Salary')
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff (Decision Tree Regression)') +
xlab('Level') +
ylab('Salary')
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff (Decision Tree Regression)') +
xlab('Level') +
ylab('Salary')
# Predicting a new result
y_pred = predict(regressor, data.frame(Level = 6.5))
